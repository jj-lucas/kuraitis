{% comment %}ly_global_begin{% endcomment %}{% include 'ly-global' %}{% comment %}ly_global_end{% endcomment %}<script>
    var Geolizr = {
        shopDomain: window.location.hostname,
        jquery: null,
        cookie: null,
        geoData: null,
        validation: "74Pfs6wLK3GmwxYLoURv2ptrFVUAsEtDupYN0jEBC3WJyjGGddHrcl8IyRwF",
        initState: 'false',
        initCallbackList: [],
        dataState: 'false',
        dataCallbackList: [],
        eventListeners: [],
        countries: {
            "AF": "AFGHANISTAN",
            "AL": "ALBANIA",
            "DZ": "ALGERIA",
            "AS": "AMERICAN SAMOA",
            "AD": "ANDORRA",
            "AO": "ANGOLA",
            "AI": "ANGUILLA",
            "AQ": "ANTARCTICA",
            "AG": "ANTIGUA AND BARBUDA",
            "AR": "ARGENTINA",
            "AM": "ARMENIA",
            "AW": "ARUBA",
            "AU": "AUSTRALIA",
            "AT": "AUSTRIA",
            "AZ": "AZERBAIJAN",
            "BS": "BAHAMAS",
            "BH": "BAHRAIN",
            "BD": "BANGLADESH",
            "BB": "BARBADOS",
            "BY": "BELARUS",
            "BE": "BELGIUM",
            "BZ": "BELIZE",
            "BJ": "BENIN",
            "BM": "BERMUDA",
            "BT": "BHUTAN",
            "BO": "BOLIVIA",
            "BA": "BOSNIA AND HERZEGOVINA",
            "BW": "BOTSWANA",
            "BV": "BOUVET ISLAND",
            "BR": "BRAZIL",
            "BQ": "BRITISH ANTARCTIC TERRITORY",
            "IO": "BRITISH INDIAN OCEAN TERRITORY",
            "VG": "BRITISH VIRGIN ISLANDS",
            "BN": "BRUNEI",
            "BG": "BULGARIA",
            "BF": "BURKINA FASO",
            "BI": "BURUNDI",
            "KH": "CAMBODIA",
            "CM": "CAMEROON",
            "CA": "CANADA",
            "CT": "CANTON AND ENDERBURY ISLANDS",
            "CV": "CAPE VERDE",
            "KY": "CAYMAN ISLANDS",
            "CF": "CENTRAL AFRICAN REPUBLIC",
            "TD": "CHAD",
            "CL": "CHILE",
            "CN": "CHINA",
            "CX": "CHRISTMAS ISLAND",
            "CC": "COCOS [KEELING] ISLANDS",
            "CO": "COLOMBIA",
            "KM": "COMOROS",
            "CG": "CON BRAZZAVILLE",
            "CD": "CON KINSHASA",
            "CK": "COOK ISLANDS",
            "CR": "COSTA RICA",
            "HR": "CROATIA",
            "CU": "CUBA",
            "CY": "CYPRUS",
            "CZ": "CZECH REPUBLIC",
            "CI": "CÔTE D’IVOIRE",
            "DK": "DENMARK",
            "DJ": "DJIBOUTI",
            "DM": "DOMINICA",
            "DO": "DOMINICAN REPUBLIC",
            "NQ": "DRONNING MAUD LAND",
            "DD": "EAST GERMANY",
            "EC": "ECUADOR",
            "EG": "EGYPT",
            "SV": "EL SALVADOR",
            "GQ": "EQUATORIAL GUINEA",
            "ER": "ERITREA",
            "EE": "ESTONIA",
            "ET": "ETHIOPIA",
            "FK": "FALKLAND ISLANDS",
            "FO": "FAROE ISLANDS",
            "FJ": "FIJI",
            "FI": "FINLAND",
            "FR": "FRANCE",
            "GF": "FRENCH GUIANA",
            "PF": "FRENCH POLYNESIA",
            "TF": "FRENCH SOUTHERN TERRITORIES",
            "FQ": "FRENCH SOUTHERN AND ANTARCTIC TERRITORIES",
            "GA": "GABON",
            "GM": "GAMBIA",
            "GE": "GEORGIA",
            "DE": "GERMANY",
            "GH": "GHANA",
            "GI": "GIBRALTAR",
            "GR": "GREECE",
            "GL": "GREENLAND",
            "GD": "GRENADA",
            "GP": "GUADELOUPE",
            "GU": "GUAM",
            "GT": "GUATEMALA",
            "GG": "GUERNSEY",
            "GN": "GUINEA",
            "GW": "GUINBISSAU",
            "GY": "GUYANA",
            "HT": "HAITI",
            "HM": "HEARD ISLAND AND MCDONALD ISLANDS",
            "HN": "HONDURAS",
            "HK": "HONG KONG SAR CHINA",
            "HU": "HUNGARY",
            "IS": "ICELAND",
            "IN": "INDIA",
            "ID": "INDONESIA",
            "IR": "IRAN",
            "IQ": "IRAQ",
            "IE": "IRELAND",
            "IM": "ISLE OF MAN",
            "IL": "ISRAEL",
            "IT": "ITALY",
            "JM": "JAMAICA",
            "JP": "JAPAN",
            "JE": "JERSEY",
            "JT": "JOHNSTON ISLAND",
            "JO": "JORDAN",
            "KZ": "KAZAKHSTAN",
            "KE": "KENYA",
            "KI": "KIRIBATI",
            "KW": "KUWAIT",
            "KG": "KYRGYZSTAN",
            "LA": "LAOS",
            "LV": "LATVIA",
            "LB": "LEBANON",
            "LS": "LESOTHO",
            "LR": "LIBERIA",
            "LY": "LIBYA",
            "LI": "LIECHTENSTEIN",
            "LT": "LITHUANIA",
            "LU": "LUXEMBOURG",
            "MO": "MACAU SAR CHINA",
            "MK": "MACEDONIA",
            "MG": "MADAGASCAR",
            "MW": "MALAWI",
            "MY": "MALAYSIA",
            "MV": "MALDIVES",
            "ML": "MALI",
            "MT": "MALTA",
            "MH": "MARSHALL ISLANDS",
            "MQ": "MARTINIQUE",
            "MR": "MAURITANIA",
            "MU": "MAURITIUS",
            "YT": "MAYOTTE",
            "FX": "METROPOLITAN FRANCE",
            "MX": "MEXICO",
            "FM": "MICRONESIA",
            "MI": "MIDWAY ISLANDS",
            "MD": "MOLDOVA",
            "MC": "MONACO",
            "MN": "MONGOLIA",
            "ME": "MONTENEGRO",
            "MS": "MONTSERRAT",
            "MA": "MOROCCO",
            "MZ": "MOZAMBIQUE",
            "MM": "MYANMAR [BURMA]",
            "NA": "NAMIBIA",
            "NR": "NAURU",
            "NP": "NEPAL",
            "NL": "NETHERLANDS",
            "AN": "NETHERLANDS ANTILLES",
            "NT": "NEUTRAL ZONE",
            "NC": "NEW CALEDONIA",
            "NZ": "NEW ZEALAND",
            "NI": "NICARAGUA",
            "NE": "NIGER",
            "NG": "NIGERIA",
            "NU": "NIUE",
            "NF": "NORFOLK ISLAND",
            "KP": "NORTH KOREA",
            "VD": "NORTH VIETNAM",
            "MP": "NORTHERN MARIANA ISLANDS",
            "NO": "NORWAY",
            "OM": "OMAN",
            "PC": "PACIFIC ISLANDS TRUST TERRITORY",
            "PK": "PAKISTAN",
            "PW": "PALAU",
            "PS": "PALESTINIAN TERRITORIES",
            "PA": "PANAMA",
            "PZ": "PANAMA CANAL ZONE",
            "PG": "PAPUA NEW GUINEA",
            "PY": "PARAGUAY",
            "YD": "PEOPLE’S DEMOCRATIC REPUBLIC OF YEMEN",
            "PE": "PERU",
            "PH": "PHILIPPINES",
            "PN": "PITCAIRN ISLANDS",
            "PL": "POLAND",
            "PT": "PORTUGAL",
            "PR": "PUERTO RICO",
            "QA": "QATAR",
            "RO": "ROMANIA",
            "RU": "RUSSIA",
            "RW": "RWANDA",
            "RE": "RÉUNION",
            "BL": "SAINT BARTHÉLEMY",
            "SH": "SAINT HELENA",
            "KN": "SAINT KITTS AND NEVIS",
            "LC": "SAINT LUCIA",
            "MF": "SAINT MARTIN",
            "PM": "SAINT PIERRE AND MIQUELON",
            "VC": "SAINT VINCENT AND THE GRENADINES",
            "WS": "SAMOA",
            "SM": "SAN MARINO",
            "SA": "SAUDI ARABIA",
            "SN": "SENEGAL",
            "RS": "SERBIA",
            "CS": "SERBIA AND MONTENEGRO",
            "SC": "SEYCHELLES",
            "SL": "SIERRA LEONE",
            "SG": "SINGAPORE",
            "SK": "SLOVAKIA",
            "SI": "SLOVENIA",
            "SB": "SOLOMON ISLANDS",
            "SO": "SOMALIA",
            "ZA": "SOUTH AFRICA",
            "GS": "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",
            "KR": "SOUTH KOREA",
            "ES": "SPAIN",
            "LK": "SRI LANKA",
            "SD": "SUDAN",
            "SR": "SURINAME",
            "SJ": "SVALBARD AND JAN MAYEN",
            "SZ": "SWAZILAND",
            "SE": "SWEDEN",
            "CH": "SWITZERLAND",
            "SY": "SYRIA",
            "ST": "SÃO TOMÉ AND PRÍNCIPE",
            "TW": "TAIWAN",
            "TJ": "TAJIKISTAN",
            "TZ": "TANZANIA",
            "TH": "THAILAND",
            "TL": "TIMLESTE",
            "TG": "TOGO",
            "TK": "TOKELAU",
            "TO": "TONGA",
            "TT": "TRINIDAD AND TOBAGO",
            "TN": "TUNISIA",
            "TR": "TURKEY",
            "TM": "TURKMENISTAN",
            "TC": "TURKS AND CAICOS ISLANDS",
            "TV": "TUVALU",
            "UM": "U.S. MINOR OUTLYING ISLANDS",
            "PU": "U.S. MISCELLANEOUS PACIFIC ISLANDS",
            "VI": "U.S. VIRGIN ISLANDS",
            "UG": "UGANDA",
            "UA": "UKRAINE",
            "SU": "UNION OF SOVIET SOCIALIST REPUBLICS",
            "AE": "UNITED ARAB EMIRATES",
            "GB": "UNITED KINGDOM",
            "US": "UNITED STATES",
            "ZZ": "UNKNOWN OR INVALID REGION",
            "UY": "URUGUAY",
            "UZ": "UZBEKISTAN",
            "VU": "VANUATU",
            "VA": "VATICAN CITY",
            "VE": "VENEZUELA",
            "VN": "VIETNAM",
            "WK": "WAKE ISLAND",
            "WF": "WALLIS AND FUTUNA",
            "EH": "WESTERN SAHARA",
            "YE": "YEMEN",
            "ZM": "ZAMBIA",
            "ZW": "ZIMBABWE",
            "AX": "ÅLAND ISLANDS"
        },
        currencies: {
            'AD': 'EUR',
            'AE': 'AED',
            'AF': 'AFN',
            'AG': 'XCD',
            'AI': 'XCD',
            'AL': 'ALL',
            'AM': 'AMD',
            'AO': 'AOA',
            'AQ': 'AQD',
            'AR': 'ARS',
            'AS': 'USD',
            'AT': 'EUR',
            'AU': 'AUD',
            'AW': 'AWG',
            'AX': 'EUR',
            'AZ': 'AZN',
            'BA': 'BAM',
            'BB': 'BBD',
            'BD': 'BDT',
            'BE': 'EUR',
            'BF': 'XOF',
            'BG': 'BGN',
            'BH': 'BHD',
            'BI': 'BIF',
            'BJ': 'XOF',
            'BL': 'EUR',
            'BM': 'BMD',
            'BN': 'BND',
            'BO': 'BOB',
            'BQ': 'USD',
            'BR': 'BRL',
            'BS': 'BSD',
            'BT': 'BTN',
            'BV': 'NOK',
            'BW': 'BWP',
            'BY': 'BYR',
            'BZ': 'BZD',
            'CA': 'CAD',
            'CC': 'AUD',
            'CD': 'CDF',
            'CF': 'XAF',
            'CG': 'XAF',
            'CH': 'CHF',
            'CI': 'XOF',
            'CK': 'NZD',
            'CL': 'CLP',
            'CM': 'XAF',
            'CN': 'CNY',
            'CO': 'COP',
            'CR': 'CRC',
            'CU': 'CUP',
            'CV': 'CVE',
            'CW': 'ANG',
            'CX': 'AUD',
            'CY': 'EUR',
            'CZ': 'CZK',
            'DE': 'EUR',
            'DJ': 'DJF',
            'DK': 'DKK',
            'DM': 'XCD',
            'DO': 'DOP',
            'DZ': 'DZD',
            'EC': 'USD',
            'EE': 'EUR',
            'EG': 'EGP',
            'EH': 'MAD',
            'ER': 'ERN',
            'ES': 'EUR',
            'ET': 'ETB',
            'FI': 'EUR',
            'FJ': 'FJD',
            'FK': 'FKP',
            'FM': 'USD',
            'FO': 'DKK',
            'FR': 'EUR',
            'GA': 'XAF',
            'GB': 'GBP',
            'GD': 'XCD',
            'GE': 'GEL',
            'GF': 'EUR',
            'GG': 'GBP',
            'GH': 'GHS',
            'GI': 'GIP',
            'GL': 'DKK',
            'GM': 'GMD',
            'GN': 'GNF',
            'GP': 'EUR',
            'GQ': 'XAF',
            'GR': 'EUR',
            'GS': 'GBP',
            'GT': 'GTQ',
            'GU': 'USD',
            'GW': 'XOF',
            'GY': 'GYD',
            'HK': 'HKD',
            'HM': 'AUD',
            'HN': 'HNL',
            'HR': 'HRK',
            'HT': 'HTG',
            'HU': 'HUF',
            'ID': 'IDR',
            'IE': 'EUR',
            'IL': 'ILS',
            'IM': 'GBP',
            'IN': 'INR',
            'IO': 'USD',
            'IQ': 'IQD',
            'IR': 'IRR',
            'IS': 'ISK',
            'IT': 'EUR',
            'JE': 'GBP',
            'JM': 'JMD',
            'JO': 'JOD',
            'JP': 'JPY',
            'KE': 'KES',
            'KG': 'KGS',
            'KH': 'KHR',
            'KI': 'AUD',
            'KM': 'KMF',
            'KN': 'XCD',
            'KP': 'KPW',
            'KR': 'KRW',
            'KW': 'KWD',
            'KY': 'KYD',
            'KZ': 'KZT',
            'LA': 'LAK',
            'LB': 'LBP',
            'LC': 'XCD',
            'LI': 'CHF',
            'LK': 'LKR',
            'LR': 'LRD',
            'LS': 'LSL',
            'LT': 'LTL',
            'LU': 'EUR',
            'LV': 'EUR',
            'LY': 'LYD',
            'MA': 'MAD',
            'MC': 'EUR',
            'MD': 'MDL',
            'ME': 'EUR',
            'MF': 'EUR',
            'MG': 'MGA',
            'MH': 'USD',
            'MK': 'MKD',
            'ML': 'XOF',
            'MM': 'MMK',
            'MN': 'MNT',
            'MO': 'MOP',
            'MP': 'USD',
            'MQ': 'EUR',
            'MR': 'MRO',
            'MS': 'XCD',
            'MT': 'EUR',
            'MU': 'MUR',
            'MV': 'MVR',
            'MW': 'MWK',
            'MX': 'MXN',
            'MY': 'MYR',
            'MZ': 'MZN',
            'NA': 'NAD',
            'NC': 'XPF',
            'NE': 'XOF',
            'NF': 'AUD',
            'NG': 'NGN',
            'NI': 'NIO',
            'NL': 'EUR',
            'NO': 'NOK',
            'NP': 'NPR',
            'NR': 'AUD',
            'NU': 'NZD',
            'NZ': 'NZD',
            'OM': 'OMR',
            'PA': 'PAB',
            'PE': 'PEN',
            'PF': 'XPF',
            'PG': 'PGK',
            'PH': 'PHP',
            'PK': 'PKR',
            'PL': 'PLN',
            'PM': 'EUR',
            'PN': 'NZD',
            'PR': 'USD',
            'PS': 'ILS',
            'PT': 'EUR',
            'PW': 'USD',
            'PY': 'PYG',
            'QA': 'QAR',
            'RE': 'EUR',
            'RO': 'RON',
            'RS': 'RSD',
            'RU': 'RUB',
            'RW': 'RWF',
            'SA': 'SAR',
            'SB': 'SBD',
            'SC': 'SCR',
            'SD': 'SDG',
            'SE': 'SEK',
            'SG': 'SGD',
            'SH': 'SHP',
            'SI': 'EUR',
            'SJ': 'NOK',
            'SK': 'EUR',
            'SL': 'SLL',
            'SM': 'EUR',
            'SN': 'XOF',
            'SO': 'SOS',
            'SR': 'SRD',
            'SS': 'SSP',
            'ST': 'STD',
            'SV': 'USD',
            'SX': 'ANG',
            'SY': 'SYP',
            'SZ': 'SZL',
            'TC': 'USD',
            'TD': 'XAF',
            'TF': 'EUR',
            'TG': 'XOF',
            'TH': 'THB',
            'TJ': 'TJS',
            'TK': 'NZD',
            'TL': 'USD',
            'TM': 'TMT',
            'TN': 'TND',
            'TO': 'TOP',
            'TR': 'TRY',
            'TT': 'TTD',
            'TV': 'AUD',
            'TW': 'TWD',
            'TZ': 'TZS',
            'UA': 'UAH',
            'UG': 'UGX',
            'UM': 'USD',
            'US': 'USD',
            'UY': 'UYU',
            'UZ': 'UZS',
            'VA': 'EUR',
            'VC': 'XCD',
            'VE': 'VEF',
            'VG': 'USD',
            'VI': 'USD',
            'VN': 'VND',
            'VU': 'VUV',
            'WF': 'XPF',
            'WS': 'WST',
            'XK': 'EUR',
            'YE': 'YER',
            'YT': 'EUR',
            'ZA': 'ZAR',
            'ZM': 'ZMK',
            'ZW': 'ZWL'
        }
    };

    Geolizr.addEventListener = function (event, eventListener) {
        if (!Geolizr.eventListeners[event]) {
            Geolizr.eventListeners[event] = [];
        }

        Geolizr.eventListeners[event].push(eventListener);

        if(event == 'geolizr.geoData' && Geolizr.geoData) {
            Geolizr.dispatchEvent('geolizr.geoData', Geolizr.geoData);
        }
    };

    Geolizr.dispatchEvent = function (event, params) {
        if (Geolizr.eventListeners[event]) {
            for (var i = 0; i < Geolizr.eventListeners[event].length; i++) {
                Geolizr.eventListeners[event][i](params);
            }
        }
    };

    Geolizr.isReady = function () {
        // check for valid installations
        return true;
    };

    Geolizr.getCurrencyCode = function (geoData) {
        if (geoData && Geolizr.currencies[geoData.countryCode]) {
            return Geolizr.currencies[geoData.countryCode];
        }
        else {
            return false;
        }
    };

    Geolizr.loadScript = function (url, callback) {
        var script = document.createElement('script');
        script.type = 'text/javascript';

        if (script.readyState) {
            script.onreadystatechange = function () {
                if (script.readyState == 'loaded' || script.readyState == 'complete') {
                    script.onreadystatechange = null;
                    callback();
                }
            };
        } else {
            script.onload = function () {
                callback();
            };
        }

        script.src = url;
        document.getElementsByTagName('head')[0].appendChild(script);
    };

    Geolizr.listCheck = function(item, filterUrls, currentUrlWithoutParams) {
        if(item.filterlistType == undefined)
            return false;

        var result = false;
        if(item.filterlistType == 'blacklist') {
            result = false;
            filterUrls.forEach(function(filter) {
                if(currentUrlWithoutParams.match(filter) !== null)
                    result = true;
            });
            return result;
        }

        if(item.filterlistType == 'whitelist') {
            result = true;
            filterUrls.forEach(function(filter) {
                if(currentUrlWithoutParams.match(filter) !== null)
                    result = false;
            });
            return result;
        }

        return false;
    };

    Geolizr.calculate = function(calcStr) {
        return new Function('return ' + calcStr)();
    };

    Geolizr.getURLParameter = function (name) {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars[name];
    };

    Geolizr.getGeoData = function (callback, ignoreCache) {
        ignoreCache = ignoreCache ? ignoreCache === true : false;
        var geolizr = Geolizr.getURLParameter('geolizr');
        var geolizrIP = Geolizr.getURLParameter('geolizr_ip');
        var geolizrCountry = Geolizr.getURLParameter('geolizr_country');

        if (Geolizr.dataState === 'true' && Geolizr.geoData) {
            callback(Geolizr.geoData);
            return;
        } else if (Geolizr.dataState === 'pending') {
            Geolizr.dataCallbackList.push(callback);
            return;
        }

        Geolizr.dataCallbackList.push(callback);
        Geolizr.dataState = 'pending';

        var usedUrl = 'https://pro.ip-api.com/json';
        var fallBackUrl = 'https://service.geolizr.com';

        if (geolizrIP) {
            ignoreCache = true;
            usedUrl = usedUrl + '/' + geolizrIP + '?key=tRmURnXYvSzbKKY';
        } else {
            usedUrl = usedUrl + '?key=tRmURnXYvSzbKKY';
        }

        if (geolizrCountry) {
            ignoreCache = true;
            usedUrl = fallBackUrl + '?country=' + geolizrCountry;
        }

        var saveCookie = function (geoData) {
            if (geolizrCountry) {
                geoData.geolizrCountry = geolizrCountry;
            }

            Geolizr.cookie('geo_data', JSON.stringify(geoData), {
                expires: 365,
                path: '/',
                domain: Geolizr.shopDomain
            });
        };

        var successCallback = function (geoData) {
            var fallback = false;
            var status = geoData.status == "success";
            if(geoData.success == true) {
                fallback = true;
                status = true;
            }

            if (status) {
                saveCookie(geoData);
                if(!fallback) {
                    geoData.currency = {'code': Geolizr.getCurrencyCode(geoData)};
                    geoData.country = {'code': geoData.countryCode, 'country': geoData.country};
                }

                Geolizr.geoData = geoData;
                Geolizr.dataState = 'true';
                for (var i = 0; i < Geolizr.dataCallbackList.length; i++) {
                    Geolizr.dataCallbackList[i](geoData, true);
                }
                Geolizr.dataCallbackList = [];
            }
        };

        var geoDataObject = false;
        var loadData = function(usedUrl, fallBackUrl, callback) {
            if((typeof geolizr != "undefined" && geolizr == 'off') ||
                    (typeof geoDataObject != "undefined" && geoDataObject && geoDataObject.geolizr == "off" )) {
                var data = {
                    "success":true,
                    "geolizr": 'off',
                    "country": {"code":"--"},
                    "currency":{"code":"---"}
                };
                callback(data);
                return;
            }

            Geolizr.jquery.ajax({
                timeout: 400,
                url: usedUrl,
                success: callback,
                error: function() {
                    $.ajax({
                        url: fallBackUrl,
                        success: callback
                    });
                }
            });
        };

        if (Geolizr.isReady()) {
            var geoData = Geolizr.cookie('geo_data');
            geoDataObject = Geolizr.jquery.parseJSON(geoData);
            if(ignoreCache === true && geoDataObject && geoDataObject['geolizr'] !== "off")
                geoDataObject = false;

            if(typeof geoDataObject != "undefined" && geoDataObject) {
                if(!geoDataObject.geolizrCountry && geoDataObject.geolizrCountry != geolizrCountry) {
                    geoDataObject = false;
                }

                if(geolizr && ("on" == geolizr || "off" == geolizr)) {
                    geoDataObject = false;
                }
            }

            if(geoDataObject) {
                successCallback(geoDataObject);
                loadData(usedUrl, fallBackUrl, saveCookie);
            } else {
                loadData(usedUrl, fallBackUrl, successCallback);
            }
        } else {
            Geolizr.dataState = 'false';
        }
    };

    Geolizr.versionCompare = function(a, b) {
        if (a === b) {
            return 0;
        }

        var a_components = a.split(".");
        var b_components = b.split(".");

        var len = Math.min(a_components.length, b_components.length);

        // loop while the components are equal
        for (var i = 0; i < len; i++) {
            // A bigger than B
            if (parseInt(a_components[i]) > parseInt(b_components[i])) {
                return 1;
            }

            // B bigger than A
            if (parseInt(a_components[i]) < parseInt(b_components[i])) {
                return -1;
            }
        }

        // If one's a prefix of the other, the longer one is greater.
        if (a_components.length > b_components.length) {
            return 1;
        }

        if (a_components.length < b_components.length) {
            return -1;
        }

        // Otherwise they are the same.
        return 0;
    };

    Geolizr.init = function (callback) {
        if (Geolizr.initState === 'true') {
            callback(Geolizr.jquery);
            return;
        } else if (Geolizr.initState === 'pending') {
            Geolizr.initCallbackList.push(callback);
            return;
        }

        Geolizr.initCallbackList.push(callback);
        Geolizr.initState = 'pending';

        var init = function ($) {
            // check for global jquery
            if(typeof window.$ == 'undefined') window.$ = $;
            Geolizr.jquery = $;
            Geolizr.cookie = function (b, j, m) {
                if (typeof j != "undefined") {
                    m = m || {};
                    if (j === null) {
                        j = "";
                        m.expires = -1
                    }
                    var e = "";
                    if (m.expires && (typeof m.expires == "number" || m.expires.toUTCString)) {
                        var f;
                        if (typeof m.expires == "number") {
                            f = new Date();
                            f.setTime(f.getTime() + (m.expires * 24 * 60 * 60 * 1000))
                        } else {
                            f = m.expires
                        }
                        e = "; expires=" + f.toUTCString()
                    }
                    var l = m.path ? "; path=" + (m.path) : "";
                    var g = m.domain ? "; domain=" + (m.domain) : "";
                    var a = m.secure ? "; secure" : "";
                    document.cookie = [b, "=", encodeURIComponent(j), e, l, g, a].join("")
                } else {
                    var d = null;
                    if (document.cookie && document.cookie != "") {
                        var k = document.cookie.split(";");
                        for (var h = 0; h < k.length; h++) {
                            var c = Geolizr.jquery.trim(k[h]);
                            if (c.substring(0, b.length + 1) == (b + "=")) {
                                d = decodeURIComponent(c.substring(b.length + 1));
                                break
                            }
                        }
                    }
                    return d
                }
            };
            var JSON;
            if (!JSON)JSON = {};
            (function () {
                "use strict";
                function c(a) {
                    return a < 10 ? "0" + a : a
                }

                if (typeof Date.prototype.toJSON !== "function") {
                    Date.prototype.toJSON = function () {
                        return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + c(this.getUTCMonth() + 1) + "-" + c(this.getUTCDate()) + "T" + c(this.getUTCHours()) + ":" + c(this.getUTCMinutes()) + ":" + c(this.getUTCSeconds()) + "Z" : null
                    };
                    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
                        return this.valueOf()
                    }
                }
                var h = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, f = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, a, d, i = {
                    "\b": "\\b",
                    "\t": "\\t",
                    "\n": "\\n",
                    "\f": "\\f",
                    "\r": "\\r",
                    '"': '\\"',
                    "\\": "\\\\"
                }, b;

                function g(a) {
                    f.lastIndex = 0;
                    return f.test(a) ? '"' + a.replace(f, function (a) {
                        var b = i[a];
                        return typeof b === "string" ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    }) + '"' : '"' + a + '"'
                }

                function e(m, n) {
                    var h, j, i, k, l = a, f, c = n[m];
                    if (c && typeof c === "object" && typeof c.toJSON === "function")c = c.toJSON(m);
                    if (typeof b === "function")c = b.call(n, m, c);
                    switch (typeof c) {
                        case"string":
                            return g(c);
                        case"number":
                            return isFinite(c) ? String(c) : "null";
                        case"boolean":
                        case"null":
                            return String(c);
                        case"object":
                            if (!c)return "null";
                            a += d;
                            f = [];
                            if (Object.prototype.toString.apply(c) === "[object Array]") {
                                k = c.length;
                                for (h = 0; h < k; h += 1)f[h] = e(h, c) || "null";
                                i = f.length === 0 ? "[]" : a ? "[\n" + a + f.join(",\n" + a) + "\n" + l + "]" : "[" + f.join(",") + "]";
                                a = l;
                                return i
                            }
                            if (b && typeof b === "object") {
                                k = b.length;
                                for (h = 0; h < k; h += 1)if (typeof b[h] === "string") {
                                    j = b[h];
                                    i = e(j, c);
                                    i && f.push(g(j) + (a ? ": " : ":") + i)
                                }
                            } else for (j in c)if (Object.prototype.hasOwnProperty.call(c, j)) {
                                i = e(j, c);
                                i && f.push(g(j) + (a ? ": " : ":") + i)
                            }
                            i = f.length === 0 ? "{}" : a ? "{\n" + a + f.join(",\n" + a) + "\n" + l + "}" : "{" + f.join(",") + "}";
                            a = l;
                            return i
                    }
                }

                if (typeof JSON.stringify !== "function")JSON.stringify = function (h, c, f) {
                    var g;
                    a = "";
                    d = "";
                    if (typeof f === "number")for (g = 0; g < f; g += 1)d += " "; else if (typeof f === "string")d = f;
                    b = c;
                    if (c && typeof c !== "function" && (typeof c !== "object" || typeof c.length !== "number"))throw new Error("JSON.stringify");
                    return e("", {"": h})
                };
                if (typeof JSON.parse !== "function")JSON.parse = function (a, c) {
                    var b;

                    function d(f, g) {
                        var b, e, a = f[g];
                        if (a && typeof a === "object")for (b in a)if (Object.prototype.hasOwnProperty.call(a, b)) {
                            e = d(a, b);
                            if (e !== undefined)a[b] = e; else delete a[b]
                        }
                        return c.call(f, g, a)
                    }

                    a = String(a);
                    h.lastIndex = 0;
                    if (h.test(a))a = a.replace(h, function (a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    });
                    if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                        b = eval("(" + a + ")");
                        return typeof c === "function" ? d({"": b}, "") : b
                    }
                    throw new SyntaxError("JSON.parse");
                }
            })()
            Geolizr.json = JSON;
            Geolizr.jquery && function ($) {
                function t(t, e) {
                    var n = t ? $(this) : e, d = $(n.attr("data-jq-dropdown")), a = n.hasClass("jq-dropdown-open");
                    if (t) {
                        if ($(t.target).hasClass("jq-dropdown-ignore"))return;
                        t.preventDefault(), t.stopPropagation()
                    } else if (n !== e.target && $(e.target).hasClass("jq-dropdown-ignore"))return;
                    o(), a || n.hasClass("jq-dropdown-disabled") || (n.addClass("jq-dropdown-open"), d.data("jq-dropdown-trigger", n).show(), r(), d.trigger("show", {
                        jqDropdown: d,
                        trigger: n
                    }))
                }

                function o(t) {
                    var o = t ? $(t.target).parents().addBack() : null;
                    if (o && o.is(".jq-dropdown")) {
                        if (!o.is(".jq-dropdown-menu"))return;
                        if (!o.is("A"))return
                    }
                    $(document).find(".jq-dropdown:visible").each(function () {
                        var t = $(this);
                        t.hide().removeData("jq-dropdown-trigger").trigger("hide", {jqDropdown: t})
                    }), $(document).find(".jq-dropdown-open").removeClass("jq-dropdown-open")
                }

                function r() {
                    var t = $(".jq-dropdown:visible").eq(0), o = t.data("jq-dropdown-trigger"), r = o ? parseInt(o.attr("data-horizontal-offset") || 0, 10) : null, e = o ? parseInt(o.attr("data-vertical-offset") || 0, 10) : null;
                    0 !== t.length && o && t.css(t.hasClass("jq-dropdown-relative") ? {
                        left: t.hasClass("jq-dropdown-anchor-right") ? o.position().left - (t.outerWidth(!0) - o.outerWidth(!0)) - parseInt(o.css("margin-right"), 10) + r : o.position().left + parseInt(o.css("margin-left"), 10) + r,
                        top: o.position().top + o.outerHeight(!0) - parseInt(o.css("margin-top"), 10) + e
                    } : {
                        left: t.hasClass("jq-dropdown-anchor-right") ? o.offset().left - (t.outerWidth() - o.outerWidth()) + r : o.offset().left + r,
                        top: o.offset().top + o.outerHeight() + e
                    })
                }

                $.extend($.fn, {
                    jqDropdown: function (r, e) {
                        switch (r) {
                            case"show":
                                return t(null, $(this)), $(this);
                            case"hide":
                                return o(), $(this);
                            case"attach":
                                return $(this).attr("data-jq-dropdown", e);
                            case"detach":
                                return o(), $(this).removeAttr("data-jq-dropdown");
                            case"disable":
                                return $(this).addClass("jq-dropdown-disabled");
                            case"enable":
                                return o(), $(this).removeClass("jq-dropdown-disabled")
                        }
                    }
                }), $(document).on("click.jq-dropdown", "[data-jq-dropdown]", t), $(document).on("click.jq-dropdown", o), $(window).on("resize", r)
            }(Geolizr.jquery);

            Geolizr.initState = 'true';
            for (var i = 0; i < Geolizr.initCallbackList.length; i++) {
                Geolizr.initCallbackList[i]($);
            }
            Geolizr.initCallbackList = [];
        };

        if ((typeof jQuery === 'undefined') || (Geolizr.versionCompare(jQuery.fn.jquery, '1.7.0') <= 0)) {
            Geolizr.loadScript('//cdn.jsdelivr.net/jquery/1.9.1/jquery.min.js', function () {
                jQuery191 = jQuery.noConflict(true);
                init(jQuery191);
            });
        } else {
            init(jQuery);
        }
    }
</script>