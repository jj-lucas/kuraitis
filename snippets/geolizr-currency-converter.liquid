{% if shop.metafields.geolizr.currency_widget_enabled == 'true' %}

  {% include 'geolizr-json' json:shop.metafields.geolizr.currency_widget_options key:'auto_insert_currency_switcher' default:'false' %}
  {% if json_value == 'true' %}
    {% include 'geolizr-currency-switcher' %}
  {% endif %}

  <!--suppress ALL -->
  <script>
    if(typeof Shopify.formatMoney === 'function') {
      var ref = Shopify.formatMoney;
      Shopify.formatMoney = function(cents, format) {
        return '<span class="geolizr-currency" data-geolizr-price="' + cents + '">' + ref(cents, format) + '</span>';
      }
    }

    Geolizr.formatMoney = function(cents, format) {
      if (typeof cents == 'string') { cents = cents.replace('.',''); }
      var value = '';
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = (format || this.money_format);

      var defaultOption = function(opt, def) {
        return (typeof opt == 'undefined' ? def : opt);
      }

      var formatWithDelimiters = function(number, precision, thousands, decimal) {
        precision = defaultOption(precision, 2);
        thousands = defaultOption(thousands, ',');
        decimal   = defaultOption(decimal, '.');

        if (isNaN(number) || number == null) { return 0; }

        number = (number/100.0).toFixed(precision);

        var parts   = number.split('.'),
                dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
                cents   = parts[1] ? (decimal + parts[1]) : '';

        return dollars + cents;
      }

      switch(formatString.match(placeholderRegex)[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
      }

      return formatString.replace(placeholderRegex, value);
    }

    Geolizr.init(function($) {
      Geolizr.loadScript('//cdn.shopify.com/s/javascripts/currencies.js', function() {
        var ajaxifyCart = $("#ajaxifyCart");
        if(ajaxifyCart.length <= 0) {
          ajaxifyCart = null;
        } else {
          var onAjaxifyCartChange = function() {
            ajaxifyCart.unbind('DOMSubtreeModified');
            switchCurrency(getCurrency());
            ajaxifyCart.bind('DOMSubtreeModified', onAjaxifyCartChange);
          }

          ajaxifyCart.bind('DOMSubtreeModified', onAjaxifyCartChange);
        }


        var moneyFormats = {{ shop.metafields.geolizr.supported_currencies }};
        if(!moneyFormats['{{ shop.currency }}']) {
          moneyFormats['{{ shop.currency }}'] = {
            moneyFormat: '{{ shop.money_format | replace: "'", "\\'" }}',
            moneyWithCurrencyFormat: '{{ shop.money_with_currency_format | replace: "'", "\\'" }}',
          }
        }

        var setCurrency = function(currency) {
          if(ajaxifyCart) {
            ajaxifyCart.unbind('DOMSubtreeModified');
          }

          var moneyFormat = moneyFormats[currency].moneyFormat;
          var customCalculation = moneyFormats[currency].calculationString || false;
          $('.geolizr-currency').each(function() {
            var originalPrice = parseInt($(this).attr('data-geolizr-price'), 10);
            var convertedPrice = Currency.convert(originalPrice, '{{ shop.currency }}', currency);

            if(customCalculation) {
              {% raw %}convertedPrice = Geolizr.calculate(customCalculation.replace('{{amount}}', convertedPrice));{% endraw %}
            }

            var output = Geolizr.formatMoney(convertedPrice, moneyFormat);
            $(this).html(output);
          });

          var domainParts = Geolizr.shopDomain.split(".");
          var cookieDomain = Geolizr.shopDomain;
          if(domainParts.length > 2) {
              cookieDomain = domainParts[domainParts.length -2] + '.' + domainParts[domainParts.length -1];
          }
          Geolizr.cookie('geolizr-currency', currency, {expires: 365, path: '/', domain: cookieDomain });

          var currenciesToLanguages = {{ shop.metafields.geolizr.currencies_to_language_codes }};
          var usedLanguageCode = currenciesToLanguages[currency];
          if(!usedLanguageCode) {
            usedLanguageCode = currenciesToLanguages['{{ shop.currency }}']
          }

          $('#geolizr-currency-switcher > i').replaceWith($('<i class="famfamfam-flag-' + usedLanguageCode + '"></i>'));
          $('.geolizr-currency-switcher-value').text(currency);

          Geolizr.dispatchEvent('currency.change', currency);

          if(ajaxifyCart) {
            ajaxifyCart.bind('DOMSubtreeModified', onAjaxifyCartChange);
          }
        };

        var getCurrency = function() {
          return Geolizr.cookie('geolizr-currency') || '{{ shop.currency }}';
        };

        $('.geolizr-currency-list-link').click(function() {
          setCurrency($(this).attr('geolizr-currency-data'));
        });

        var switchCurrency = function(currency) {
          if(currency && moneyFormats[currency]) {
            setCurrency(currency);
          } else {
            setCurrency('{{ shop.currency }}');
          }
        }

        var options = {{ shop.metafields.geolizr.currency_widget_options }};
        var usedCurrency = getCurrency();
        var geolizrCountry = Geolizr.getURLParameter('geolizr_country');

        if((!Geolizr.cookie('geolizr-currency') || geolizrCountry) && options.auto_switch_currency === true) {
          Geolizr.getGeoData(function(geoData) {
            usedCurrency = geoData.currency.code;
            if($('.geolizr-currency-list-link[geolizr-currency-data="' + geoData.currency.code + '"]').length <= 0 && moneyFormats[geoData.currency.code]) {
              $('#geolizr-currency-placeholder-value').text(geoData.currency.code);
              $('#geolizr-currency-placeholder a').attr('geolizr-currency-data', geoData.currency.code);

              var currenciesToLanguages = {{ shop.metafields.geolizr.currencies_to_language_codes }};
              var usedLanguageCode = currenciesToLanguages[geoData.currency.code];
              if(usedLanguageCode) {
                $('#geolizr-currency-placeholder i').attr('class', 'famfamfam-flag-' + usedLanguageCode);
              }

              $('#geolizr-currency-placeholder').show();
            }

            switchCurrency(usedCurrency);
          });
        } else {
          switchCurrency(usedCurrency);
        }

        if(typeof Shopify.formatMoney === 'function') {
          var ref = Shopify.formatMoney;
          Shopify.formatMoney = function(cents, format) {
            var currency = getCurrency();
            if(moneyFormats[currency]) {
              var moneyFormat = moneyFormats[currency].moneyFormat;
              var originalPrice = parseInt(cents, 10);
              var convertedPrice = Currency.convert(originalPrice, '{{ shop.currency }}', currency);
              return '<span class="geolizr-currency" data-geolizr-price="' + cents + '">' + ref(convertedPrice, moneyFormat) + '</span>';
            } else {
              return '<span class="geolizr-currency" data-geolizr-price="' + cents + '">' + ref(cents, format) + '</span>';
            }
          }
        }

        Geolizr.dispatchEvent('currency.api', {switchCurrency: switchCurrency, getCurrency: getCurrency});
      });
    });
  </script>

{% endif %}